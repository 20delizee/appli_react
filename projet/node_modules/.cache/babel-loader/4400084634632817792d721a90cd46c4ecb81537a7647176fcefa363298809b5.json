{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tinti\\\\tout\\\\Dev\\\\reactjs\\\\projet\\\\src\\\\components\\\\Test.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport '../Message.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [message, setMessage] = useState('');\n  const [users, setUsers] = useState([]);\n  const [conversation, setConversation] = useState([]);\n  const storedEmail = sessionStorage.getItem('email');\n  const storedToken = sessionStorage.getItem('token');\n  console.log(storedEmail);\n  console.log(storedToken);\n  useEffect(() => {\n    // Fonction pour récupérer les utilisateurs depuis l'API\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/auth', {\n          headers: {\n            Authorization: `Bearer ${storedToken}`\n          }\n        });\n        const data = await response.json();\n        setUsers(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    // Appeler la fonction de récupération des utilisateurs lors du chargement du composant\n    fetchUsers();\n  }, [storedToken]);\n  useEffect(() => {\n    const fetchConversation = async () => {\n      try {\n        if (selectedUser) {\n          const response = await fetch(`http://localhost:3000/api/message/email/${selectedUser}?sender=${storedEmail}`, {\n            headers: {\n              Authorization: `Bearer ${storedToken}`\n            }\n          });\n          const data = await response.json();\n          console.log(data);\n          setConversation(data);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchConversation();\n  }, [selectedUser, storedToken, storedEmail]);\n  const handleUserSelect = userId => {\n    setSelectedUser(userId);\n    setConversation([]); // Réinitialiser la conversation sélectionnée\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    // Vérifiez que l'utilisateur sélectionné n'est pas null\n    if (selectedUser) {\n      try {\n        const data = {\n          email: selectedUser,\n          // Utiliser l'email du destinataire\n          receiver: storedEmail,\n          // Utiliser l'email de l'expéditeur\n          message: message\n        };\n        const response = await fetch('http://localhost:3000/api/message/create', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        });\n        const result = await response.json();\n        console.log('Réponse du serveur :', result);\n\n        // Effacez le champ de message après l'envoi\n        setMessage('');\n      } catch (error) {\n        console.error('Erreur lors de la requête :', error);\n      }\n    }\n  };\n  const handleMessageChange = event => {\n    setMessage(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"li\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"a\",\n        children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"Test\",\n          onClick: () => handleUserSelect(user.email),\n          children: user.email\n        }, user.email, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: [selectedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Conversation avec \", selectedUser]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: conversation.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Date: \", moment(message.date).format('YYYY-MM-DD'), \" \", message.time]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Contenu: \", message.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Exp\\xE9diteur: \", message.receiver]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 19\n            }, this)]\n          }, message._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), selectedUser && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Message:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: message,\n            onChange: handleMessageChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Envoyer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6rstuXB5Uu57zeUyyMWCUvf2jqM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","moment","jsxDEV","_jsxDEV","App","_s","selectedUser","setSelectedUser","message","setMessage","users","setUsers","conversation","setConversation","storedEmail","sessionStorage","getItem","storedToken","console","log","fetchUsers","response","fetch","headers","Authorization","data","json","error","fetchConversation","handleUserSelect","userId","handleSubmit","event","preventDefault","email","receiver","method","body","JSON","stringify","result","handleMessageChange","target","value","className","children","map","user","onClick","fileName","_jsxFileName","lineNumber","columnNumber","date","format","time","_id","onSubmit","type","onChange","_c","$RefreshReg$"],"sources":["C:/Users/tinti/tout/Dev/reactjs/projet/src/components/Test.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport '../Message.css';\r\n\r\nfunction App() {\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [message, setMessage] = useState('');\r\n  const [users, setUsers] = useState([]);\r\n  const [conversation, setConversation] = useState([]);  \r\n  const storedEmail = sessionStorage.getItem('email');\r\n  const storedToken = sessionStorage.getItem('token');\r\n  console.log(storedEmail);\r\n  console.log(storedToken);\r\n  useEffect(() => {\r\n    // Fonction pour récupérer les utilisateurs depuis l'API\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3000/api/auth', {\r\n          headers: {\r\n            Authorization: `Bearer ${storedToken}`,\r\n          },\r\n        });\r\n        const data = await response.json();\r\n        setUsers(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    // Appeler la fonction de récupération des utilisateurs lors du chargement du composant\r\n    fetchUsers();\r\n  }, [storedToken]);\r\n\r\n  useEffect(() => {\r\n    const fetchConversation = async () => {\r\n      try {\r\n        if (selectedUser) {\r\n          const response = await fetch(`http://localhost:3000/api/message/email/${selectedUser}?sender=${storedEmail}`, {\r\n  headers: {\r\n    Authorization: `Bearer ${storedToken}`,\r\n  },\r\n});\r\n          const data = await response.json();\r\n          console.log(data);\r\n          setConversation(data);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n  \r\n    fetchConversation();\r\n  }, [selectedUser, storedToken, storedEmail]);\r\n\r\n  \r\n\r\n  const handleUserSelect = (userId) => {\r\n    setSelectedUser(userId);\r\n    setConversation([]); // Réinitialiser la conversation sélectionnée\r\n  };\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // Vérifiez que l'utilisateur sélectionné n'est pas null\r\n    if (selectedUser) {\r\n      try {\r\n        const data = {\r\n          email: selectedUser, // Utiliser l'email du destinataire\r\n          receiver: storedEmail, // Utiliser l'email de l'expéditeur\r\n          message: message,\r\n        };\r\n\r\n        const response = await fetch('http://localhost:3000/api/message/create', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(data),\r\n        });\r\n\r\n        const result = await response.json();\r\n        console.log('Réponse du serveur :', result);\r\n\r\n        // Effacez le champ de message après l'envoi\r\n        setMessage('');\r\n      } catch (error) {\r\n        console.error('Erreur lors de la requête :', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMessageChange = (event) => {\r\n    setMessage(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n\r\n      {/* Afficher la liste des utilisateurs disponibles */}\r\n      <div className='li'>\r\n        <ul className='a'>\r\n          {users.map((user) => (\r\n          <li className='Test' key={user.email} onClick={() => handleUserSelect(user.email)}>\r\n            {user.email}\r\n          </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      {/* Afficher la conversation sélectionnée */}\r\n      <div className='message'>\r\n        {selectedUser && (\r\n          <div>\r\n            <h2>Conversation avec {selectedUser}</h2>\r\n            <ul>\r\n              {conversation.map((message) => (\r\n                <li key={message._id}>\r\n                  <p>Date: {moment(message.date).format('YYYY-MM-DD')} {message.time}</p>\r\n                  <p>Contenu: {message.message}</p>\r\n                  <p>Expéditeur: {message.receiver}</p> \r\n\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n        {/* Formulaire pour envoyer un message */}\r\n        {selectedUser && (\r\n          <form onSubmit={handleSubmit}>\r\n            <label>\r\n              Message:\r\n              <input type=\"text\" value={message} onChange={handleMessageChange} />\r\n            </label>\r\n            <button type=\"submit\">Envoyer</button>\r\n          </form>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}