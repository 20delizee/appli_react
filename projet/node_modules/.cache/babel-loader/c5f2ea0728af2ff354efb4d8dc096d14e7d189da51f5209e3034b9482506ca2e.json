{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tinti\\\\tout\\\\Dev\\\\reactjs\\\\projet\\\\src\\\\components\\\\PassQuestion.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  useEffect(() => {\n    // Effectuer la requête pour obtenir les questions depuis votre API\n    fetch('http://localhost:3000/api/question/').then(response => response.json()).then(data => setQuestions(data)).catch(error => console.error('Erreur lors de la requête :', error));\n  }, []); // Cette dépendance vide signifie que cette requête s'effectue une seule fois lorsque le composant est monté.\n\n  const getRandomQuestion = () => {\n    if (questions.length > 0) {\n      // Générer un index aléatoire pour obtenir une question aléatoire\n      const randomIndex = Math.floor(Math.random() * questions.length);\n      const randomQuestion = questions[randomIndex];\n\n      // Afficher la question\n      setCurrentQuestion(randomQuestion);\n    } else {\n      // Si la liste de questions est vide ou toutes les questions ont été posées\n      setCurrentQuestion(\"Aucune question disponible.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getRandomQuestion,\n      children: \"Poser une question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: currentQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"iEfCBOtqVRiKycKjiAd5ewEpNT8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","App","_s","questions","setQuestions","currentQuestion","setCurrentQuestion","fetch","then","response","json","data","catch","error","console","getRandomQuestion","length","randomIndex","Math","floor","random","randomQuestion","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tinti/tout/Dev/reactjs/projet/src/components/PassQuestion.js"],"sourcesContent":["import React, { useEffect,useState } from 'react';\r\n\r\nfunction App() {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  \r\n    useEffect(() => {\r\n      // Effectuer la requête pour obtenir les questions depuis votre API\r\n      fetch('http://localhost:3000/api/question/')\r\n        .then(response => response.json())\r\n        .then(data => setQuestions(data))\r\n        .catch(error => console.error('Erreur lors de la requête :', error));\r\n    }, []); // Cette dépendance vide signifie que cette requête s'effectue une seule fois lorsque le composant est monté.\r\n  \r\n    const getRandomQuestion = () => {\r\n      if (questions.length > 0) {\r\n        // Générer un index aléatoire pour obtenir une question aléatoire\r\n        const randomIndex = Math.floor(Math.random() * questions.length);\r\n        const randomQuestion = questions[randomIndex];\r\n  \r\n        // Afficher la question\r\n        setCurrentQuestion(randomQuestion);\r\n      } else {\r\n        // Si la liste de questions est vide ou toutes les questions ont été posées\r\n        setCurrentQuestion(\"Aucune question disponible.\");\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <button onClick={getRandomQuestion}>Poser une question</button>\r\n        {currentQuestion && <p>{currentQuestion}</p>}\r\n      </div>\r\n    );\r\n  }\r\n  \r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAACC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE5DD,SAAS,CAAC,MAAM;IACd;IACAU,KAAK,CAAC,qCAAqC,CAAC,CACzCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIP,YAAY,CAACO,IAAI,CAAC,CAAC,CAChCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC,CAAC;EACxE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIZ,SAAS,CAACa,MAAM,GAAG,CAAC,EAAE;MACxB;MACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGjB,SAAS,CAACa,MAAM,CAAC;MAChE,MAAMK,cAAc,GAAGlB,SAAS,CAACc,WAAW,CAAC;;MAE7C;MACAX,kBAAkB,CAACe,cAAc,CAAC;IACpC,CAAC,MAAM;MACL;MACAf,kBAAkB,CAAC,6BAA6B,CAAC;IACnD;EACF,CAAC;EAED,oBACEN,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAQuB,OAAO,EAAER,iBAAkB;MAAAO,QAAA,EAAC;IAAkB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC9DtB,eAAe,iBAAIL,OAAA;MAAAsB,QAAA,EAAIjB;IAAe;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEV;AAACzB,EAAA,CAhCMD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}