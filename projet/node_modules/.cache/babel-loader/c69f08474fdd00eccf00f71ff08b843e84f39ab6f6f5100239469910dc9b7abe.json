{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tinti\\\\Desktop\\\\reactjs\\\\projet\\\\src\\\\components\\\\Test.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport '../Style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [message, setMessage] = useState('');\n  const [users, setUsers] = useState([]);\n  const [conversation, setConversation] = useState([]);\n  const storedEmail = sessionStorage.getItem('email');\n  const storedToken = sessionStorage.getItem('token');\n  useEffect(() => {\n    // Fonction pour récupérer les utilisateurs depuis l'API\n    const fetchUsers = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/auth', {\n          headers: {\n            Authorization: `Bearer ${storedToken}`\n          }\n        });\n        const data = await response.json();\n        setUsers(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    // Appeler la fonction de récupération des utilisateurs lors du chargement du composant\n    fetchUsers();\n  }, [storedToken]);\n  useEffect(() => {\n    // Fonction pour récupérer la conversation depuis l'API\n    const fetchConversation = async () => {\n      try {\n        // Vérifiez que l'utilisateur sélectionné n'est pas null\n        if (selectedUser) {\n          const response = await fetch(`http://localhost:3000/api/message/email/${selectedUser}`, {\n            headers: {\n              Authorization: `Bearer ${storedToken}`\n            }\n          });\n          const data = await response.json();\n          if (Array.isArray(data)) {\n            setConversation(data);\n          } else {\n            setConversation([]);\n          }\n          setConversation(data);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    // Appeler la fonction de récupération de la conversation chaque fois que l'utilisateur sélectionné change\n    fetchConversation();\n  }, [selectedUser, storedToken]);\n  const handleUserSelect = userId => {\n    setSelectedUser(userId);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    // Vérifiez que l'utilisateur sélectionné n'est pas null\n    if (selectedUser) {\n      try {\n        const data = {\n          email: selectedUser,\n          // Utiliser l'email du destinataire\n          receiver: storedEmail,\n          // Utiliser l'email de l'expéditeur\n          message: message\n        };\n        const response = await fetch('http://localhost:3000/api/message/create', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${storedToken}`\n          },\n          body: JSON.stringify(data)\n        });\n        const result = await response.json();\n        console.log('Réponse du serveur :', result);\n\n        // Effacez le champ de message après l'envoi\n        setMessage('');\n      } catch (error) {\n        console.error('Erreur lors de la requête :', error);\n      }\n    }\n  };\n  const handleMessageChange = event => {\n    setMessage(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"Coucou\",\n      children: \"COUCOU CONTACT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"Test\",\n        onClick: () => handleUserSelect(user.email),\n        children: user.email\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), selectedUser && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Conversation avec \", selectedUser]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: conversation.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Date: \", moment(message.date).format('YYYY-MM-DD'), \" \", message.time]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Contenu: \", message.message]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this)]\n        }, message._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), selectedUser && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Message:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: message,\n          onChange: handleMessageChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Envoyer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6rstuXB5Uu57zeUyyMWCUvf2jqM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","moment","jsxDEV","_jsxDEV","App","_s","selectedUser","setSelectedUser","message","setMessage","users","setUsers","conversation","setConversation","storedEmail","sessionStorage","getItem","storedToken","fetchUsers","response","fetch","headers","Authorization","data","json","error","console","fetchConversation","Array","isArray","handleUserSelect","userId","handleSubmit","event","preventDefault","email","receiver","method","body","JSON","stringify","result","log","handleMessageChange","target","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","user","onClick","id","date","format","time","_id","onSubmit","type","onChange","_c","$RefreshReg$"],"sources":["C:/Users/tinti/Desktop/reactjs/projet/src/components/Test.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport '../Style.css';\r\n\r\nfunction App() {\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [message, setMessage] = useState('');\r\n  const [users, setUsers] = useState([]);\r\n  const [conversation, setConversation] = useState([]);  \r\n  const storedEmail = sessionStorage.getItem('email');\r\n  const storedToken = sessionStorage.getItem('token');\r\n\r\n  useEffect(() => {\r\n    // Fonction pour récupérer les utilisateurs depuis l'API\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3000/api/auth', {\r\n          headers: {\r\n            Authorization: `Bearer ${storedToken}`,\r\n          },\r\n        });\r\n        const data = await response.json();\r\n        setUsers(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    // Appeler la fonction de récupération des utilisateurs lors du chargement du composant\r\n    fetchUsers();\r\n  }, [storedToken]);\r\n\r\n  useEffect(() => {\r\n    // Fonction pour récupérer la conversation depuis l'API\r\n    const fetchConversation = async () => {\r\n      try {\r\n        // Vérifiez que l'utilisateur sélectionné n'est pas null\r\n        if (selectedUser) {\r\n          const response = await fetch(`http://localhost:3000/api/message/email/${selectedUser}`, {\r\n            headers: {\r\n              Authorization: `Bearer ${storedToken}`,\r\n            },\r\n          });\r\n          const data = await response.json();\r\n          if (Array.isArray(data)) {\r\n            setConversation(data);\r\n          } else {\r\n            setConversation([]);\r\n          }\r\n          setConversation(data);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n      \r\n    };\r\n\r\n    // Appeler la fonction de récupération de la conversation chaque fois que l'utilisateur sélectionné change\r\n    fetchConversation();\r\n  }, [selectedUser, storedToken]);\r\n\r\n  \r\n\r\n  const handleUserSelect = (userId) => {\r\n    setSelectedUser(userId);\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // Vérifiez que l'utilisateur sélectionné n'est pas null\r\n    if (selectedUser) {\r\n      try {\r\n        const data = {\r\n          email: selectedUser, // Utiliser l'email du destinataire\r\n          receiver: storedEmail, // Utiliser l'email de l'expéditeur\r\n          message: message,\r\n        };\r\n\r\n        const response = await fetch('http://localhost:3000/api/message/create', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${storedToken}`,\r\n          },\r\n          body: JSON.stringify(data),\r\n        });\r\n\r\n        const result = await response.json();\r\n        console.log('Réponse du serveur :', result);\r\n\r\n        // Effacez le champ de message après l'envoi\r\n        setMessage('');\r\n      } catch (error) {\r\n        console.error('Erreur lors de la requête :', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMessageChange = (event) => {\r\n    setMessage(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"Coucou\">COUCOU CONTACT</p>\r\n\r\n      {/* Afficher la liste des utilisateurs disponibles */}\r\n      <ul>\r\n        {users.map((user) => (\r\n          <li className='Test' key={user.id} onClick={() => handleUserSelect(user.email)}>\r\n            {user.email}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* Afficher la conversation sélectionnée */}\r\n      {selectedUser && (\r\n        <div>\r\n          <h2>Conversation avec {selectedUser}</h2>\r\n          <ul>\r\n            {conversation.map((message) => (\r\n              <li key={message._id}>\r\n                <p>Date: {moment(message.date).format('YYYY-MM-DD')} {message.time}</p>\r\n                <p>Contenu: {message.message}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n\r\n      {/* Formulaire pour envoyer un message */}\r\n      {selectedUser && (\r\n        <form onSubmit={handleSubmit}>\r\n          <label>\r\n            Message:\r\n            <input type=\"text\" value={message} onChange={handleMessageChange} />\r\n          </label>\r\n          <button type=\"submit\">Envoyer</button>\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}