{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tinti\\\\tout\\\\Dev\\\\reactjs\\\\projet\\\\src\\\\components\\\\PassQuestion.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [questionsAsked, setQuestionsAsked] = useState(0);\n  const [askedQuestionIds, setAskedQuestionIds] = useState([]);\n  useEffect(() => {\n    // Effectuer la requête pour obtenir les questions depuis votre API avec les champs spécifiques\n    fetch('http://localhost:3000/api/question/').then(response => response.json()).then(data => setQuestions(data)).catch(error => console.error('Erreur lors de la requête :', error));\n  }, []);\n  const getRandomQuestion = () => {\n    if (questions.length > 0) {\n      if (questionsAsked < 10) {\n        const availableQuestions = questions.filter(question => !askedQuestionIds.includes(question._id));\n        if (availableQuestions.length === 0) {\n          setCurrentQuestion(\"Vous avez posé toutes les questions disponibles.\");\n        } else {\n          const randomIndex = Math.floor(Math.random() * availableQuestions.length);\n          const randomQuestion = availableQuestions[randomIndex];\n\n          // Marquez la question comme posée\n          setAskedQuestionIds([...askedQuestionIds, randomQuestion._id]);\n\n          // Extraire les valeurs spécifiques de la question\n          const {\n            questionName,\n            questionContent,\n            questionCategory,\n            questionPoint,\n            questionAnswer\n          } = randomQuestion;\n\n          // Mettre à jour l'état avec la nouvelle question\n          setCurrentQuestion(`Question : ${questionName}\\nContenu : ${questionContent}\\nCatégorie : ${questionCategory}\\nPoints : ${questionPoint}\\nRéponse : ${questionAnswer}`);\n\n          // Incrémenter le nombre de questions posées\n          setQuestionsAsked(questionsAsked + 1);\n        }\n      } else {\n        setCurrentQuestion(\"Vous avez posé 10 questions. Aucune autre question n'est autorisée.\");\n      }\n    } else {\n      setCurrentQuestion(\"Aucune question disponible.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getRandomQuestion,\n      children: \"Poser une question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCurrentQuestion(null),\n      children: \"Effacer la question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: currentQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AUgqQyZ4Y8bpxqm53JdZr7WOFIU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","App","_s","questions","setQuestions","currentQuestion","setCurrentQuestion","questionsAsked","setQuestionsAsked","askedQuestionIds","setAskedQuestionIds","fetch","then","response","json","data","catch","error","console","getRandomQuestion","length","availableQuestions","filter","question","includes","_id","randomIndex","Math","floor","random","randomQuestion","questionName","questionContent","questionCategory","questionPoint","questionAnswer","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tinti/tout/Dev/reactjs/projet/src/components/PassQuestion.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nfunction App() {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [currentQuestion, setCurrentQuestion] = useState(null);\r\n    const [questionsAsked, setQuestionsAsked] = useState(0);\r\n    const [askedQuestionIds, setAskedQuestionIds] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Effectuer la requête pour obtenir les questions depuis votre API avec les champs spécifiques\r\n    fetch('http://localhost:3000/api/question/')\r\n      .then(response => response.json())\r\n      .then(data => setQuestions(data))\r\n      .catch(error => console.error('Erreur lors de la requête :', error));\r\n  }, []);\r\n\r\n  const getRandomQuestion = () => {\r\n    if (questions.length > 0) {\r\n      if (questionsAsked < 10) {\r\n        const availableQuestions = questions.filter(question => !askedQuestionIds.includes(question._id));\r\n  \r\n        if (availableQuestions.length === 0) {\r\n          setCurrentQuestion(\"Vous avez posé toutes les questions disponibles.\");\r\n        } else {\r\n          const randomIndex = Math.floor(Math.random() * availableQuestions.length);\r\n          const randomQuestion = availableQuestions[randomIndex];\r\n  \r\n          // Marquez la question comme posée\r\n          setAskedQuestionIds([...askedQuestionIds, randomQuestion._id]);\r\n  \r\n          // Extraire les valeurs spécifiques de la question\r\n          const { questionName, questionContent, questionCategory, questionPoint, questionAnswer } = randomQuestion;\r\n  \r\n          // Mettre à jour l'état avec la nouvelle question\r\n          setCurrentQuestion(\r\n            `Question : ${questionName}\\nContenu : ${questionContent}\\nCatégorie : ${questionCategory}\\nPoints : ${questionPoint}\\nRéponse : ${questionAnswer}`\r\n          );\r\n  \r\n          // Incrémenter le nombre de questions posées\r\n          setQuestionsAsked(questionsAsked + 1);\r\n        }\r\n      } else {\r\n        setCurrentQuestion(\"Vous avez posé 10 questions. Aucune autre question n'est autorisée.\");\r\n      }\r\n    } else {\r\n      setCurrentQuestion(\"Aucune question disponible.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={getRandomQuestion}>Poser une question</button>\r\n      <button onClick={() => setCurrentQuestion(null)}>Effacer la question</button>\r\n      {currentQuestion && <p>{currentQuestion}</p>}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}